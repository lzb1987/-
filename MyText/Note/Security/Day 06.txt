Day 07 Zabbix报警机制 、 Zabbix进阶操作 、 监控案例

一.Zabbix报警机制

· 基本概念
  1.自定义的监控项默认不会自动报警，首页也不会提示错误，需要配置触发器与报警动作才可以自定报警
  2.什么是触发器（trigger）？
    表达式，如内存不足300M，用户超过30个等
  3.当触发条件发生后，会导致一个触发事件
    触发事件会执行某个动作
  4.什么是动作（action）？
    动作是触发器的条件被触发后所执行的行为
    可以是发送邮件、也可以是重启某个服务等

· 触发器
  1.创建触发器
  Serverity Warning (警报级别)
  2.触发器表达式
  3.配置触发器
  
· 设置邮件
  1.创建Media
  2.为用户添加Media
  
· 创建Action动作
  1.Action动作
  Action(动作)是定义当触发器被触发的时候执行什么行为
  2.配置Action动作的触发条件
  3.配置Action动作的具体行为
  
二.Zabbix自动发现
  1.创建自动发现规则
  2.填写规则
  3.创建Action动作
  4.配置Action动作具体行为

三.Zabbix主动监控

· 概念
  - 默认zabbix采用的是被动监控，主动和被动都是对被监控端主机而言的
  - 被动监控：Server向Agent发起连接，发送监控key，Agent接受请求，响应监控数据
  - 主动监控：Agent向Server发起连接，Agent请求需要检测的监控项目列表，Server响应Agent发送一个items列表，Agent确认收到监控列表，TCP连接完成，会话关闭，Agent开始周期性地收集数据
  - 区别：Server不用每次需要数据都连接Agent，Agent会自己收集数据并处理数据，Server仅需要保存数据即可
  - 当监控主机达到一定量级后，Zabbix服务器会越来越慢，此时，可以考虑使用主动监控，释放服务器的压力
  - 另外，Zabbix也支持分布式监控，也是可以考虑的方案
  
· 实验
  1.添加被监控主机
    1) 为被监控主机安装部署zabbix agent
    # yum -y install gcc pcre-devel
    # tar -xf zabbix-3.4.4.tar.gz 
    # cd zabbix-3.4.4/
    #./configure --enable-agent
    # make && make install
    2) 修改agent配置文件
    · 将agent监控模式修改为主动模式
    # vim /usr/local/etc/zabbix_agentd.conf 
    #Server=127.0.0.1,192.168.2.5
    //注释该行，允许谁监控本机
    StartAgents=0            
    //被动监控时启动多个进程
    //设置为0，则禁止被动监控，不启动zabbix_agentd服务
    ServerActive=192.168.2.5
    //允许哪些主机监控本机（主动模式），一定要取消127.0.0.1
    Hostname=zabbixclient_web2
    //告诉监控服务器，是谁发的数据信息
    //一定要和zabbix服务器配置的监控主机名称一致（后面设置）
    RefreshActiveChecks=120
    //默认120秒检测一次
    UnsafeUserParameters=1            
    //允许自定义key
    Include=/usr/local/etc/zabbix_agentd.conf.d/
    # killall zabbix_agentd                    //关闭服务
    # zabbix_agentd                            //启动服务

四.拓扑图与聚合图形(略过)

五.自定义监控案例

· 监控Nginx服务状态
  
  1.安装nginx,开启status
  # ./configure \
  --with-http_stub_status_module
  # make && make install
  # vim /usr/local/nginx/conf/nginx.conf
  location /status {
      stub_staus on;
  }
  # curl http://192.168.2.100/status
  
  2.自定义监控key
  语法格式:
    UserParameter=key,command
    UserParameter=key[*],<command>
    key里的所有参数,都会传递给后面命令的位置变量
    如:
    UserParameter=ping[*],echo $1
    ping[0],返回的结果都是0
    ping[aaa],返回的结果都是aaa
    注意:被监控端修改配置文件,需要允许自定义key并且设置include
  · 创建自定义key
    # cd /usr/local/etc/zabbix_agentd.conf.d/
    # vim nginx.status
    UserParameter=nginx.status[*],/usr/local/bin/nginx_status.sh $1
    # killall zabbix_agentd
    # zabbix_agentd
  · 自定义脚本
    # vim /usr/local/bin/nginx_status.sh
    #!/bin/bash
    case $1 in
    active)
        curl -s http://192.168.2.100/status |awk '/Active/{print $NF}';;
    waiting)
        curl -s http://192.168.2.100/status |awk '/Waiting/{print $NF}';;
    accepts)
        curl -s http://192.168.2.100/status |awk 'NR==3{print $2}';;
    esac
    # chmod +x  /usr/local/bin/nginx_status.sh
  · 测试
    # zabbix_get  -s 127.0.0.1 \
    -k 'nginx.status[accepts]'
